(ns ^:figwheel-hooks routes.core
  (:require
   [goog.dom :as gdom]
   [reagent.core :as r]
   [routes.abc :as abc]
   [cljsjs.semantic-ui-react :as ui]))


(defn multiply [a b] (* a b))

(defn feature-card []
  [:> ui/Segment {:inverted true}
   [:> ui/Button
    {
     :color :blue
     :inverted true
     :on-click #(println "haa")}
    "show modal"]
   ]
  )

(defn nav-bar []
  (let [state (r/atom :edit)]
    (fn []
      [:> ui/Segment {:inverted true
                      :color :blue
                      ;;:fluid true
                      }


       [:> ui/Menu {;;:color :blue
                    :inverted true
                    :pointing true
                    :secondary true
                    :stackable true

                    }
        [:> ui/Menu.Item {:name :edit
                          :active (= @state :edit)
                          :on-click #(reset! state :edit)}
         "Edit"]

        [:> ui/Menu.Item {:active (= @state :review)
                          :on-click #(reset! state :review)}
         "Review"]

        [:> ui/Menu.Item {:active (= @state :rate)
                          :on-click #(reset! state :rate)}
         "Rate"]]])))


(defn home []
  [:div
   [nav-bar]
   [feature-card]
   ;; [:main.wrapper
   ;;  [:section.section.parallax.bg1 [:h1 "Such Adorableness"]]

   ;;  [:section.section.static [:h1 "Boring"]]
   ;;  [:section.section.parallax.bg2 [:h1 "SO FWUFFY AWWW"]]

   ;;  [:div.hand]]
   ])


;; define your app data so that it doesn't get over-written on reload
(defonce app-state (r/atom {:text "Hello world!"}))

(defn get-app-element []
  (gdom/getElement "app"))

(defn hello-world []
  [:div
   ;; [:h1 (:text @app-state)]
   ;; [:h3 "Edit this in src/routes/core.cljs and watch it change!"]
   [home]])

(defn mount [el]
  (r/render-component [hello-world] el))

(defn mount-app-element []
  (when-let [el (get-app-element)]
    (mount el)))

;; conditionally start your application based on the presence of an "app" element
;; this is particularly helpful for testing this ns without launching the app
(mount-app-element)

;; specify reload hook with ^;after-load metadata
(defn ^:after-load on-reload []
  (mount-app-element)
  ;; optionally touch your app-state to force rerendering depending on
  ;; your application
  ;; (swap! app-state update-in [:__figwheel_counter] inc)
)



;; plan
;; 1. rekreiraj sajt koristice semantic ui

;; 1. add re-frame
;; 2. try to recreate the site to be as lean as possible but to retain the look and feel i already trimmed it
;;
